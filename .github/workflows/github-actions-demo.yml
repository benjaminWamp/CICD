name: üöÄ Build workflow
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on:
  push:
    # branches:
    #   - main
    #   - develop
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üöÄ Lancement des √©tapes de construction"
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üöÄ Le code du d√©p√¥t a √©t√© clon√© sur le serveur d'ex√©cution."
      - run: npm clean-install
      - run: npm run build
      - name: Save cache (node_modules)
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - run : echo "üèÅ √âtapes de construction termin√©es"

  test:
    runs-on: ubuntu-latest
    needs:
        - build
    strategy:
      matrix:
        browsers: [chrome, edge]
    steps:
      - uses: actions/checkout@v4
      - run: echo "üöÄ Lancement des √©tapes de test"
      - name: Restore cache (node_modules)
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - run: echo "üöÄ Le code du d√©p√¥t a √©t√© clon√© sur le serveur d'ex√©cution."
      - uses: cypress-io/github-action@v6
        with:
          start: npm run dev
          browser: ${{ matrix.browsers }}
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          path: cypress/videos/
          browsers: ${{ matrix.browsers }}
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          path: cypress/screenshot/
          browsers: ${{ matrix.browsers }}
      - run: echo "üöÄ √âtapes de test termin√©es"
      - run : echo "üöÄ √âtapes de test termin√©es"
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: 
  #     test
  #   steps:
  #     - uses: appleboy/ssh-action@v1
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         key: ${{ secrets.PASSWORD }}
  #         script: |
  #           export NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
  #           cd cda242-next
  #           git pull
  #           npm install
  #           npm run build
  #           pm2 restart npm
  build-push-docker:
    runs-on: ubuntu-latest
    permissions:
        contents: read
        packages: write
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          target: next
          tags: ghcr.io/benjaminwamp/cda242-next/next:${{github.ref_name}}  
  # docker:
  #   runs-on: ubuntu-latest
  #   permissions: 
  #     contents: read
  #     packages: write
  #   steps: 
  #   - uses: actions/checkout@v4
  #   - name: Login to GitHub Container Registry
  #     uses: docker/login-action@v3
  #     with: 
  #       registry: ghcr.io
  #       username: ${{github.actor}}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v6
  #     with:
  #       context: .
  #       push: true
  #       tags: ghcr.io/benjaminwamp/cda242-next/next:latest

  deploy-docker-test:
    runs-on: ubuntu-latest
    if: ${{github.ref_name == 'develop'}}
    environment: 
      name: test
      url: http://${{ secrets.SSH_HOST }}:3000
    needs:
      - build-push-docker
    steps:
      - uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd test
            sudo docker compose -f docker-compose.test.yml pull
            sudo docker compose -f docker-compose.test.yml up -d

  deploy-docker-prod:
    runs-on: ubuntu-latest
    if: ${{github.ref_name == 'main'}}
    environment: 
      name: production
      url: http://${{ secrets.SSH_HOST }}
    needs:
      - build-push-docker
    steps:
      - uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd prod
            sudo docker compose -f docker-compose.prod.yml pull
            sudo docker compose -f docker-compose.prod.yml up -d